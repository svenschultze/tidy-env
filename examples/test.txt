warning: unused import: `RoomId`
 --> crates/core/src/sim.rs:1:42
  |
1 | use crate::ecs::{Entity, Pose, Velocity, RoomId, Held, Receptacle};
  |                                          ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Coord`, `LineString`, and `Polygon`
 --> crates/core/src/gen.rs:7:11
  |
7 | use geo::{Polygon, LineString, Coord, BooleanOps};
  |           ^^^^^^^  ^^^^^^^^^^  ^^^^^

warning: unused import: `geo::algorithm::area::Area`
 --> crates/core/src/gen.rs:8:5
  |
8 | use geo::algorithm::area::Area;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `geo::algorithm::contains::Contains`
 --> crates/core/src/gen.rs:9:5
  |
9 | use geo::algorithm::contains::Contains;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `geo::Point`
  --> crates/core/src/gen.rs:10:5
   |
10 | use geo::Point;
   |     ^^^^^^^^^^

warning: unused import: `BooleanOps`
 --> crates/core/src/gen.rs:7:39
  |
7 | use geo::{Polygon, LineString, Coord, BooleanOps};
  |                                       ^^^^^^^^^^

warning: unused variable: `min_secondary`
  --> crates/core/src/gen.rs:90:27
   |
90 |         let (min_primary, min_secondary) = match axis {
   |                           ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_secondary`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
   --> crates/core/src/gen.rs:400:9
    |
400 |     let mut neigh: Vec<usize> = rects.iter().enumerate()
    |         ----^^^^^
    |         |
    |         help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: function `bsp_split` is never used
  --> crates/core/src/gen.rs:75:4
   |
75 | fn bsp_split(rng: &mut impl Rng, root: Rect, opts: &GenOpts) -> Vec<Rect> {
   |    ^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: function `bsp_split_to_count` is never used
   --> crates/core/src/gen.rs:120:4
    |
120 | fn bsp_split_to_count(rng: &mut impl Rng, root: Rect, opts: &GenOpts, target_count: usize) -> Vec<Rect> {
    |    ^^^^^^^^^^^^^^^^^^

warning: function `can_split` is never used
   --> crates/core/src/gen.rs:168:4
    |
168 | fn can_split(rect: &Rect, axis: Axis, opts: &GenOpts) -> bool {
    |    ^^^^^^^^^

warning: function `build_adj_graph` is never used
   --> crates/core/src/gen.rs:175:4
    |
175 | fn build_adj_graph(leaves: &[Rect]) -> HashMap<usize, Vec<usize>> {
    |    ^^^^^^^^^^^^^^^

warning: function `are_adjacent` is never used
   --> crates/core/src/gen.rs:187:4
    |
187 | fn are_adjacent(a: &Rect, b: &Rect) -> bool {
    |    ^^^^^^^^^^^^

warning: function `rects_overlap` is never used
   --> crates/core/src/gen.rs:195:4
    |
195 | fn rects_overlap(a: &Rect, b: &Rect) -> bool {
    |    ^^^^^^^^^^^^^

warning: function `stochastic_merge` is never used
   --> crates/core/src/gen.rs:199:4
    |
199 | fn stochastic_merge(rng: &mut impl Rng, rects: &mut Vec<Rect>, opts: &GenOpts) {
    |    ^^^^^^^^^^^^^^^^

warning: function `carve_hallways` is never used
   --> crates/core/src/gen.rs:247:4
    |
247 | fn carve_hallways(rooms: &mut Vec<RoomGeom>, rng: &mut SmallRng, opts: &GenOpts) {
    |    ^^^^^^^^^^^^^^

warning: function `carve_doors` is never used
   --> crates/core/src/gen.rs:300:4
    |
300 | fn carve_doors(rooms: &mut Vec<RoomGeom>, _rng: &mut SmallRng) {
    |    ^^^^^^^^^^^

warning: function `are_walls_adjacent` is never used
   --> crates/core/src/gen.rs:338:4
    |
338 | fn are_walls_adjacent(wall_a: &WallSegment, wall_b: &WallSegment) -> bool {
    |    ^^^^^^^^^^^^^^^^^^

warning: function `split_room_additive` is never used
   --> crates/core/src/gen.rs:380:4
    |
380 | fn split_room_additive(rng: &mut impl Rng, rects: &mut Vec<Rect>, opts: &GenOpts) {
    |    ^^^^^^^^^^^^^^^^^^^

warning: function `merge_adjacent_rooms` is never used
   --> crates/core/src/gen.rs:397:4
    |
397 | fn merge_adjacent_rooms(rng: &mut impl Rng, rects: &mut Vec<Rect>) {
    |    ^^^^^^^^^^^^^^^^^^^^

warning: function `bsp_split_to_count` is never used
   --> crates/core/src/gen.rs:120:4
    |
120 | fn bsp_split_to_count(rng: &mut impl Rng, root: Rect, opts: &GenOpts, target_count: usize) -> Vec<Rect> {
    |    ^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: `core` (lib) generated 20 warnings (run `cargo fix --lib -p core` to apply 6 suggestions)
warning: `core` (lib test) generated 12 warnings (11 duplicates)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 4.20s
     Running unittests src/lib.rs (/mnt/c/Users/SvenSchultze/Documents/tidy-env/target/debug/deps/core-94d57e77810e0fcf)

running 12 tests
test tests::it_works ... ok
test tests::test_step_updates_pose ... ok
test gen::tests::test_stochastic_merge ... ok
test gen::tests::test_bsp_split ... ok
test gen::tests::test_generate_respects_max_rooms ... ok
test gen::tests::test_walls_match_polygon ... ok
test gen::tests::test_no_duplicate_or_degenerate_walls ... ok
test tests::test_generate_world_has_rooms ... ok
test gen::tests::test_carve_hallways ... ok
test gen::tests::test_no_room_overlaps ... ok
test gen::tests::test_carve_doors ... ok
test tests::test_world_serialization_roundtrip ... ok

test result: ok. 12 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.02s

   Doc-tests core

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

